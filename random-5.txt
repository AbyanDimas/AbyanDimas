Oke! Aku bantu buatkan step-by-step cara setup **SQS** di AWS Console sesuai project kamu, berdasarkan penjelasan dan kode `orderqueue.js` dan `paymentqueue.js` yang kamu kasih.

---

# ðŸ”¥ STEP BY STEP SETUP DI AWS CONSOLE

## A. **Buat Dead Letter Queue (DLQ)**
> Karena di instruksi kamu, queue perlu pakai DLQ.

1. Buka AWS Console âž” Cari **SQS** âž” Klik **Create queue**.
2. Pilih **Standard Queue**.
3. Queue Name:  
   - `lks-queueorder-dlq`
   - `lks-queuepayment-dlq`  
   (buat **2 DLQ** untuk order dan payment)
4. Setting:
   - Maximum message size: **256 KB**.
   - Message retention period: **4 days** (untuk DLQ order) dan **2 days** (untuk DLQ payment).
   - Visibility timeout: **30 seconds**.
5. Klik **Create Queue**.

---

## B. **Buat Queue Utama untuk Order: `lks-queue-order`**
1. Klik **Create queue**.
2. Pilih **FIFO Queue** (karena `MessageGroupId` dipakai di kodenya âž” FIFO wajib!).
3. Queue Name:  
   **`lks-queue-order.fifo`** (ingat, FIFO harus `.fifo` di belakang).
4. Enable setting berikut:
   - âœ… Enable high throughput for FIFO.
   - âœ… Content-based deduplication (optional, kalau mau otomatis deduplication).
5. Configuration:
   - Maximum message size: **256 KB**.
   - Message retention period: **4 days**.
   - Visibility timeout: **30 seconds**.
   - Delivery delay: 0 seconds.
   - Receive message wait time: **5 seconds**.
6. **Dead-letter queue**:
   - Enable DLQ.
   - Choose the DLQ: **lks-queueorder-dlq**.
7. Klik **Create Queue**.

---

## C. **Buat Queue Utama untuk Payment: `lks-queue-payment`**
1. Klik **Create queue**.
2. Pilih **Standard Queue** (karena payment tidak perlu FIFO).
3. Queue Name:  
   **`lks-queue-payment`**
4. Configuration:
   - Maximum message size: **256 KB**.
   - Message retention period: **2 days**.
   - Visibility timeout: **30 seconds**.
   - Receive message wait time: **10 seconds**.
5. **Dead-letter queue**:
   - Enable DLQ.
   - Choose the DLQ: **lks-queuepayment-dlq**.
6. Klik **Create Queue**.

---

## D. **Buat Lambda Functions**
> Kita buat Lambda `writeOrder` dan `payment` untuk memproses SQS event.

### 1. Lambda for `writeOrder`
- Buka **AWS Lambda** âž” Klik **Create function**.
- Name: **lks-write-order**
- Runtime: **Node.js 18.x** (atau yg sesuai kebutuhanmu)
- Upload file **writeOrder.js** (isi file dari kode `orderqueue.js` tadi).
- Environment Variables:
  - `SQS_QUEUE_URL` = URL dari **lks-queue-order.fifo**.

### 2. Lambda for `payment`
- Create another function:
- Name: **lks-payment**
- Upload file **paymentqueue.js** (isi file dari kode `paymentqueue.js` tadi).
- Environment Variables:
  - `SQS_QUEUE_URL` = URL dari **lks-queue-payment**.

---

## E. **Set Event Source Mapping (Trigger)**
> Agar SQS bisa otomatis trigger Lambda.

1. Buka Lambda function **lks-write-order**.
2. Add Trigger âž” pilih **SQS**.
3. Choose the SQS queue: **lks-queue-order.fifo**.
4. Batch size: 1 (default saja).
5. Klik Add.

Lakukan hal yang sama untuk Lambda **lks-payment**, dan pilih queue **lks-queue-payment**.

---

# ðŸ§  **Summary hasil setup kamu:**

| Resource                 | Name                           | Type             |
|---------------------------|--------------------------------|------------------|
| Queue                     | lks-queue-order.fifo           | FIFO Queue       |
| Dead Letter Queue (DLQ)   | lks-queueorder-dlq             | Standard Queue   |
| Queue                     | lks-queue-payment              | Standard Queue   |
| Dead Letter Queue (DLQ)   | lks-queuepayment-dlq           | Standard Queue   |
| Lambda Function           | lks-write-order                | Lambda Function  |
| Lambda Function           | lks-payment                    | Lambda Function  |

---

Kalau mau sekalian, aku bisa buatkan juga **diagram arsitektur** simple kayak yang kamu upload itu (bentuk SQS âž” Lambda âž” SQS âž” DLQ), mau sekalian dibuatkan juga? ðŸš€  
Mau lanjut?
